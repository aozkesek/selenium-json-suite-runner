import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;

import org.ao.suite.ObjectContainer;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library --with testng'
 * by 'ahmetozkesek' at '11/11/16 13:58' with Gradle 3.2-rc-2
 *
 * @author ahmetozkesek, @date 11/11/16 13:58
 */
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ObjectContainerTests {
	
	static public ObjectContainer VarContainer = new ObjectContainer();
	
	@Test
	public void T01_PutGet( ) {
		
		VarContainer.init();
		
		System.out.println(VarContainer.putVariable("now", "${SYS_DATETIME_NOW}"));
		
		for (int i = 0; i < 10; i++)
			VarContainer.putVariable(
					String.format("var_%1$d", i),
					String.format("var_%1$1d_value_%1$d", i));
		
		for (int i = 10; i < 20; i++)
			VarContainer.putVariable(
					String.format("var_%1$d", i),
					String.format("${var_%1$d}", i-10));
		
		for(int i = 0; i < 10; i++) {
			String k = String.format("${var_%1$d}", i);
			String aV = VarContainer.getVariable(k).toString();
			String eV = String.format("var_%1$1d_value_%1$d", i);
			System.out.println(k.concat(" is evaluating -> ").concat(aV).concat(" == ").concat(eV));
			assertEquals(aV, eV);
		}
		for(int i = 10; i < 20; i++) {
			String k = String.format("var_%1$d", i);
			String aV = VarContainer.getVariable(k).toString();
			String eV = VarContainer.getVariable(String.format("var_%1$1d", i-10)).toString();
			System.out.println(k.concat(" is evaluating -> ").concat(aV).concat(" == ").concat(eV));
			assertEquals(aV, eV);
		}
		
		for (int i = 0; i < 3; i++) {
			try { Thread.sleep(1000); } catch (InterruptedException e) { }
			System.out.println(VarContainer.getVariable("${now}"));
		}
		
		assertNotEquals(VarContainer.getVariable("now"), null);	
		
	}
	
	
	
	
}
